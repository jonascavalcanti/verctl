name: release

on:
  push:
    branches:
      - main

jobs:
  go-release:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build linux binaries
      run: |
        env GOOS=linux GOARCH=amd64 go build -o xversioner_linux_amd64
    -
      name: Build Windows binaries
      run: |
        env GOOS=windows GOARCH=amd64 go build -o xversioner_windows_amd64
    -
      name: Build macOS_amd64 binaries
      run: |
        env GOOS=darwin GOARCH=amd64 go build -o xversioner_macOS_amd64
    -
      name: Application version update
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        SEMVER="patch"
        BRANCH_NAME=$(echo ${{ steps.extract_branch.outputs.branch_name }} \
          | sed 's/\//-/g' \
          | awk -F'-' '{print $1}')

        if [ $BRANCH_NAME == "feat"  ]; then SEMVER="minor"; fi

        CMT_MSG=$(echo ${{ steps.extract_commit_msg.outputs.cmt_msg }} \
          | grep -i 'BREAKING CHANGE') || CMT_MSG=""

        [ ! -z "$CMT_MSG" ] && SEMVER="major"

        ./xversioner_linux_amd64 update -f ./app.properties -i $SEMVER
        TAG=$(./xversioner_linux_amd64 get filepath ./app.properties)

        echo "TAG=$TAG" >> $GITHUB_ENV

        git config --local user.name "github-actions[bot]"

        git add app.properties
        git commit -m "Update app version to $TAG" -a
       # git push origin main

        # git tag $TAG -a -m "$CMT_MSG"
        # git push origin --tags -f

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    # - name: Release
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     tag_name: ${{ env.TAG }}
    #     files: |
    #       xversioner_linux_amd64
    #       xversioner_windows_amd64
    #       xversioner_macOS_amd64

    - name: Create Tag Release on Repository
      id: create_tag_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ steps.vars.outputs.sha_short }}
        release_name: Release v${{ steps.vars.outputs.sha_short }}
        body: |
          Changes in this Release
          - Generate Tag with version ${{ steps.vars.outputs.sha_short }}
          - ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
        files: |
          xversioner_linux_amd64
          xversioner_windows_amd64
          xversioner_macOS_amd64

